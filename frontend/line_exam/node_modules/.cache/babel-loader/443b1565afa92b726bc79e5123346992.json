{"ast":null,"code":"import healthCheckService from '@/services/HealthCheckService';\nexport default {\n  name: \"upload-component\",\n  props: {\n    msg: String\n  },\n\n  data() {\n    return {\n      isDragging: false,\n      file: \"\",\n      fileName: \"\",\n      uploadPercentage: 0\n    };\n  },\n\n  methods: {\n    dragOver() {\n      this.isDragging = true;\n    },\n\n    dragLevave() {\n      this.isDragging = false;\n    },\n\n    // async loadCSVFile(e) {\n    //   // var vm = this\n    //   let files = [...e.dataTransfer.files]\n    //   if (window.FileReader) {\n    //     let result = await this.readCSVFile(files[0])\n    //     this.fileName = files[0].name\n    //     this.csvFile = result\n    //   } else {\n    //     console.log(\"FileReader are not supported in this browser.\");\n    //   }\n    // },\n    // uploadFile(file) {\n    //   const reader = new FileReader()\n    //   return new Promise((resolve, reject) => {\n    //     reader.readAsText(file);\n    //     // Handle errors load\n    //     reader.onload = function (event) {\n    //         var csv = event.target.result;\n    //         resolve(csv)\n    //       };\n    //     reader.onerror = function (event) {\n    //       if (event.target.error.name == \"NotReadableError\") {\n    //         reject(\"Cannot read file !\");\n    //       }\n    //     };\n    //   })\n    // },\n    async uploadFile() {\n      await healthCheckService.healthCheckUpload(this.file);\n    },\n\n    requestUploadFile() {\n      this.file = this.$refs.file.files[0];\n      this.uploadFile();\n    }\n\n  }\n};","map":{"version":3,"mappings":"AA8DA,OAAOA,kBAAP,MAA+B,+BAA/B;AACA,eAAe;EACbC,IAAI,EAAE,kBADO;EAEbC,KAAK,EAAE;IACLC,GAAG,EAAEC;EADA,CAFM;;EAKbC,IAAI,GAAG;IACL,OAAO;MACLC,UAAU,EAAE,KADP;MAELC,IAAI,EAAE,EAFD;MAGLC,QAAQ,EAAE,EAHL;MAILC,gBAAgB,EAAE;IAJb,CAAP;EAMD,CAZY;;EAabC,OAAO,EAAE;IACPC,QAAQ,GAAG;MACT,KAAKL,UAAL,GAAkB,IAAlB;IACD,CAHM;;IAIPM,UAAU,GAAG;MACX,KAAKN,UAAL,GAAkB,KAAlB;IACD,CANM;;IAQP;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA,MAAMO,UAAN,GAAmB;MACjB,MAAMb,kBAAkB,CAACc,iBAAnB,CAAqC,KAAKP,IAA1C,CAAN;IACD,CAxCM;;IA0CPQ,iBAAiB,GAAG;MAClB,KAAKR,IAAL,GAAY,KAAKS,KAAL,CAAWT,IAAX,CAAgBU,KAAhB,CAAsB,CAAtB,CAAZ;MACA,KAAKJ,UAAL;IACD;;EA7CM;AAbI,CAAf","names":["healthCheckService","name","props","msg","String","data","isDragging","file","fileName","uploadPercentage","methods","dragOver","dragLevave","uploadFile","healthCheckUpload","requestUploadFile","$refs","files"],"sourceRoot":"","sources":["/Users/sayantina/Documents/project/Line_Exam/frontend/line-exam/src/components/uploadComponent.vue"],"sourcesContent":["<template>\n  <div class=\"container mx-auto my-5 w-1/3\">\n    <div class=\"text-2xl font-bold text-left py-2\">Websites Checker</div>\n    <div\n      class=\"\n        container\n        mx-auto\n        box-border\n        border-dashed border-4\n        rounded-xl\n        w-full\n        py-5\n        box-upload\n        text-gray-500\n      \"\n      @dragover.prevent=\"dragOver\"\n      @dragleave.prevent=\"dragLeave\"\n      @drop.prevent=\"uploadFile($event)\"\n    >\n      <div\n        class=\"\n          bg-[url('./../../public/csv.png')] bg-no-repeat bg-center\n          w-28\n          h-28\n          mx-auto\n          bg-[length:100px_100px]\n        \"\n      ></div>\n      <div class=\"text-2xl font-bold py-2\">\n        Drag your .csv file here to start uploading\n      </div>\n      <div class=\"w-2/5 mx-auto\">\n        <div class=\"relative flex py-5 items-center\">\n          <div class=\"flex-grow border-t-4 border-gray-400\"></div>\n          <span class=\"flex-shrink mx-4 text-2xl font-bold text-gray-400\"\n            >OR</span\n          >\n          <div class=\"flex-grow border-t-4 border-gray-400\"></div>\n        </div>\n        <div\n          class=\"rounded-lg text-white text-2xl font-bold py-4 cursor-pointer\"\n          style=\"background-color: #6749f5\"\n          @click=\"$refs.file.click()\"\n        >\n          Browse File\n        </div>\n        <input\n          type=\"file\"\n          id=\"csv_file\"\n          name=\"csv_file\"\n          ref=\"file\"\n          style=\"display: none\"\n          accept=\".csv\"\n          hidden\n          @change=\"requestUploadFile\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport healthCheckService from '@/services/HealthCheckService';\nexport default {\n  name: \"upload-component\",\n  props: {\n    msg: String,\n  },\n  data() {\n    return {\n      isDragging: false,\n      file: \"\",\n      fileName: \"\",\n      uploadPercentage: 0\n    };\n  },\n  methods: {\n    dragOver() {\n      this.isDragging = true;\n    },\n    dragLevave() {\n      this.isDragging = false;\n    },\n\n    // async loadCSVFile(e) {\n    //   // var vm = this\n    //   let files = [...e.dataTransfer.files]\n    //   if (window.FileReader) {\n    //     let result = await this.readCSVFile(files[0])\n    //     this.fileName = files[0].name\n    //     this.csvFile = result\n    //   } else {\n    //     console.log(\"FileReader are not supported in this browser.\");\n    //   }\n    // },\n\n    // uploadFile(file) {\n    //   const reader = new FileReader()\n    //   return new Promise((resolve, reject) => {\n    //     reader.readAsText(file);\n    //     // Handle errors load\n    //     reader.onload = function (event) {\n    //         var csv = event.target.result;\n    //         resolve(csv)\n    //       };\n\n    //     reader.onerror = function (event) {\n    //       if (event.target.error.name == \"NotReadableError\") {\n    //         reject(\"Cannot read file !\");\n    //       }\n    //     };\n    //   })\n    // },\n\n    async uploadFile() {\n      await healthCheckService.healthCheckUpload(this.file)\n    },\n\n    requestUploadFile() {\n      this.file = this.$refs.file.files[0]\n      this.uploadFile()\n    },\n  },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.box-upload {\n  background: #f5f7fc;\n  border-color: #c7cddb;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}